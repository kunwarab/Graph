#include <bits/stdc++.h>
using namespace std;
#define F first
#define S second
using state = pair<int, int>;

int n, m;
//int cnt = 0;
vector<string> mp;
//vector<vector<int>> col;

int dx[4] = {0, 1, 0, -1};
int dy[4] = {1, 0, -1, 0};

bool is_valid(int x, int y)
{
    if (x >= 0 && x < n && y >= 0 && y < m )
    {
        return 1;
    }
    return 0;
}

vector<state> neighbour(state node)
{
    vector<state> ans;
    for (int i = 0; i < 4; i++)
    {
        int nx = node.F + dx[i];
        int ny = node.S + dy[i];
        if (is_valid(nx, ny))
        {
            ans.push_back(make_pair(nx, ny));
        }
    }
    return ans;
}

void dfs(state node)
{
    mp[node.F][node.S] = '#';

    for (auto v : neighbour(node))
    {
        if (mp[v.F][v.S] != '#')
        {
            dfs(v);
        }
    }
}

void solve()
{
    int cnt = 0;
    //col.assign(n+1, vector<int>(m+1,0));
    cin >> n >> m;
    mp.resize(n);
    for (int i = 0; i < n; i++)
    { 
            cin >> mp[i];    
    }
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < m; j++)
        {
            if (mp[i][j] == '.')
            {
                cnt++;
                dfs({i, j});
            }
        }
    }
    cout << cnt;
}
signed main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    int t = 1;
    // cin>>t;
    while (t--)
    {
        solve();
    }
}
